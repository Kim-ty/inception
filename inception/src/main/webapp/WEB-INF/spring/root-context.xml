<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo-1.8.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<!-- 값주입 -->
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy" />
		<property name="url"
			value="jdbc:log4jdbc:oracle:thin:@192.168.1.29:1521:orcl" />
		<property name="username" value="messiah" />
		<property name="password" value="messiah" />
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:/mybatis-config.xml"></property>
		<property name="mapperLocations" value="classpath:/mapper/**/*Mapper.xml" />

	</bean>

	<!-- <bean id="googleConnectionFactory" class="org.springframework.social.google.connect.GoogleConnectionFactory"> -->
	<!-- <constructor-arg value="867095911617-0pin1k4q55m1v19ju0f875hbba4knvq8.apps.googleusercontent.com" 
		/> -->
	<!-- <constructor-arg value="BqH5sDDc3Ptw7ajy8PBiWLYm" /> -->
	<!-- </bean> -->
	<!-- <bean id="googleOAuth2Parameters" class="org.springframework.social.oauth2.OAuth2Parameters"> -->
	<!-- <property name="scope" value="https://www.googleapis.com/auth/plus.login"/> -->
	<!-- <property name="scope" value="https://www.googleapis.com/auth/plus.me"/> -->
	<!-- <property name="redirectUri" value="http://localhost:8080/user/login/google"/> -->
	<!-- </bean> -->


	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"
		destroy-method="clearCache">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory">
		</constructor-arg>
	</bean>
	<!-- base-package를 기준으로 모든 패키지를 자동으로 Bean등록 -->
	<!-- 단, @Repository난 @Service 등 Annotation이 붙은 클래스만 등록 -->
	<context:component-scan base-package="kr.co.inception.user.dao" />
	<context:component-scan base-package="kr.co.inception.user.service" />
	<context:component-scan base-package="kr.co.inception.profile.dao" />
	<context:component-scan base-package="kr.co.inception.profile.service" />
	<context:component-scan base-package="kr.co.inception.board.dao" />
	<context:component-scan base-package="kr.co.inception.board.service" />
	<context:component-scan base-package="kr.co.inception.follow.dao" />
	<context:component-scan base-package="kr.co.inception.follow.service" />
	<context:component-scan base-package="kr.co.inception.message.dao" />
	<context:component-scan base-package="kr.co.inception.message.service" />
	<!-- aop 설정하기 -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	<context:component-scan base-package="kr.co.inception.aop"></context:component-scan>

	<!-- 트랜잭션매니저 정의 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>


	<!-- Transactional 어노테이션 검색 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- <aop:config> -->
	<!-- Transaction이 수행 될 포인트 컷 -->
	<!-- <aop:pointcut id="serviceOperation" expression="execution(* kr.co.kkb.service..*(..))" 
		/> -->
	<!-- <aop:advisor id="transactionAdvisor" pointcut-ref="serviceOperation" 
		advice-ref="txAdvice"/> -->
	<!-- </aop:config> -->
	<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager"> -->
	<!-- <tx:attributes> -->
	<!-- <tx:method name="getContents" rollback-for="kr.co.kkb.exception.BoardNotFoundException"/> -->
	<!-- </tx:attributes> -->
	<!-- </tx:advice> -->


	<mongo:mongo-client host="192.168.1.45" port="27017"
		credentials="lsh2:1234@test21">
		<mongo:client-options connections-per-host="8"
			threads-allowed-to-block-for-connection-multiplier="4"
			connect-timeout="1000" max-wait-time="1500" socket-keep-alive="true"
			socket-timeout="1500" />
	</mongo:mongo-client>

	<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
		<constructor-arg ref="mongo" />
		<constructor-arg name="databaseName" value="test21" />

	</bean>





</beans>
